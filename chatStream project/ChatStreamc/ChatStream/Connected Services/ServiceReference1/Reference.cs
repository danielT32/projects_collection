//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatStream.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceWCF")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.Post))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.Follow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.Friend))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.Like))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.DMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.GMember))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.GMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChatStream.ServiceReference1.Comment))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Post", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Post : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPrivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrivate {
            get {
                return this.IsPrivateField;
            }
            set {
                if ((this.IsPrivateField.Equals(value) != true)) {
                    this.IsPrivateField = value;
                    this.RaisePropertyChanged("IsPrivate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EntrDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EntrDate {
            get {
                return this.EntrDateField;
            }
            set {
                if ((this.EntrDateField.Equals(value) != true)) {
                    this.EntrDateField = value;
                    this.RaisePropertyChanged("EntrDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fname {
            get {
                return this.FnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FnameField, value) != true)) {
                    this.FnameField = value;
                    this.RaisePropertyChanged("Fname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lname {
            get {
                return this.LnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LnameField, value) != true)) {
                    this.LnameField = value;
                    this.RaisePropertyChanged("Lname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uname {
            get {
                return this.UnameField;
            }
            set {
                if ((object.ReferenceEquals(this.UnameField, value) != true)) {
                    this.UnameField = value;
                    this.RaisePropertyChanged("Uname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Follow", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Follow : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User FollowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User FollowingField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User Follower {
            get {
                return this.FollowerField;
            }
            set {
                if ((object.ReferenceEquals(this.FollowerField, value) != true)) {
                    this.FollowerField = value;
                    this.RaisePropertyChanged("Follower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User Following {
            get {
                return this.FollowingField;
            }
            set {
                if ((object.ReferenceEquals(this.FollowingField, value) != true)) {
                    this.FollowingField = value;
                    this.RaisePropertyChanged("Following");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friend", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Friend : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User User1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User User2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Approved {
            get {
                return this.ApprovedField;
            }
            set {
                if ((this.ApprovedField.Equals(value) != true)) {
                    this.ApprovedField = value;
                    this.RaisePropertyChanged("Approved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User1 {
            get {
                return this.User1Field;
            }
            set {
                if ((object.ReferenceEquals(this.User1Field, value) != true)) {
                    this.User1Field = value;
                    this.RaisePropertyChanged("User1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User2 {
            get {
                return this.User2Field;
            }
            set {
                if ((object.ReferenceEquals(this.User2Field, value) != true)) {
                    this.User2Field = value;
                    this.RaisePropertyChanged("User2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Like", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Like : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.Post PostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.Post Post {
            get {
                return this.PostField;
            }
            set {
                if ((object.ReferenceEquals(this.PostField, value) != true)) {
                    this.PostField = value;
                    this.RaisePropertyChanged("Post");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DMessage", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class DMessage : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User DestUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SeenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User SourceUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User DestUser {
            get {
                return this.DestUserField;
            }
            set {
                if ((object.ReferenceEquals(this.DestUserField, value) != true)) {
                    this.DestUserField = value;
                    this.RaisePropertyChanged("DestUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Seen {
            get {
                return this.SeenField;
            }
            set {
                if ((this.SeenField.Equals(value) != true)) {
                    this.SeenField = value;
                    this.RaisePropertyChanged("Seen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User SourceUser {
            get {
                return this.SourceUserField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceUserField, value) != true)) {
                    this.SourceUserField = value;
                    this.RaisePropertyChanged("SourceUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Group : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GNnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PublicityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GNname {
            get {
                return this.GNnameField;
            }
            set {
                if ((object.ReferenceEquals(this.GNnameField, value) != true)) {
                    this.GNnameField = value;
                    this.RaisePropertyChanged("GNname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Publicity {
            get {
                return this.PublicityField;
            }
            set {
                if ((this.PublicityField.Equals(value) != true)) {
                    this.PublicityField = value;
                    this.RaisePropertyChanged("Publicity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GMember", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class GMember : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.Group GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.Group Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GMessage", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class GMessage : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.Group GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.Group Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comment", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Comment : ChatStream.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.Post PostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatStream.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.Post Post {
            get {
                return this.PostField;
            }
            set {
                if ((object.ReferenceEquals(this.PostField, value) != true)) {
                    this.PostField = value;
                    this.RaisePropertyChanged("Post");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatStream.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        ChatStream.ServiceReference1.CompositeType GetDataUsingDataContract(ChatStream.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ChatStream.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteComment", ReplyAction="http://tempuri.org/IService1/DeleteCommentResponse")]
        void DeleteComment(ChatStream.ServiceReference1.Comment entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteComment", ReplyAction="http://tempuri.org/IService1/DeleteCommentResponse")]
        System.Threading.Tasks.Task DeleteCommentAsync(ChatStream.ServiceReference1.Comment entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertComment", ReplyAction="http://tempuri.org/IService1/InsertCommentResponse")]
        void InsertComment(ChatStream.ServiceReference1.Comment entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertComment", ReplyAction="http://tempuri.org/IService1/InsertCommentResponse")]
        System.Threading.Tasks.Task InsertCommentAsync(ChatStream.ServiceReference1.Comment entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateComment", ReplyAction="http://tempuri.org/IService1/UpdateCommentResponse")]
        void UpdateComment(ChatStream.ServiceReference1.Comment entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateComment", ReplyAction="http://tempuri.org/IService1/UpdateCommentResponse")]
        System.Threading.Tasks.Task UpdateCommentAsync(ChatStream.ServiceReference1.Comment entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectCommentByPost", ReplyAction="http://tempuri.org/IService1/SelectCommentByPostResponse")]
        ChatStream.ServiceReference1.Comment[] SelectCommentByPost(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectCommentByPost", ReplyAction="http://tempuri.org/IService1/SelectCommentByPostResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Comment[]> SelectCommentByPostAsync(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUser", ReplyAction="http://tempuri.org/IService1/InsertUserResponse")]
        ChatStream.ServiceReference1.User InsertUser(ChatStream.ServiceReference1.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUser", ReplyAction="http://tempuri.org/IService1/InsertUserResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> InsertUserAsync(ChatStream.ServiceReference1.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        ChatStream.ServiceReference1.User Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByUserID", ReplyAction="http://tempuri.org/IService1/SelectByUserIDResponse")]
        ChatStream.ServiceReference1.User SelectByUserID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByUserID", ReplyAction="http://tempuri.org/IService1/SelectByUserIDResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> SelectByUserIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserByUName", ReplyAction="http://tempuri.org/IService1/SelectUserByUNameResponse")]
        ChatStream.ServiceReference1.User[] SelectUserByUName(string Uname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserByUName", ReplyAction="http://tempuri.org/IService1/SelectUserByUNameResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> SelectUserByUNameAsync(string Uname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        void UpdateUser(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        void DeleteUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignUp", ReplyAction="http://tempuri.org/IService1/SignUpResponse")]
        ChatStream.ServiceReference1.User SignUp(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignUp", ReplyAction="http://tempuri.org/IService1/SignUpResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> SignUpAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertFollow", ReplyAction="http://tempuri.org/IService1/InsertFollowResponse")]
        ChatStream.ServiceReference1.Follow InsertFollow(ChatStream.ServiceReference1.Follow follow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertFollow", ReplyAction="http://tempuri.org/IService1/InsertFollowResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Follow> InsertFollowAsync(ChatStream.ServiceReference1.Follow follow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollow", ReplyAction="http://tempuri.org/IService1/DeleteFollowResponse")]
        void DeleteFollow(ChatStream.ServiceReference1.Follow follow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollow", ReplyAction="http://tempuri.org/IService1/DeleteFollowResponse")]
        System.Threading.Tasks.Task DeleteFollowAsync(ChatStream.ServiceReference1.Follow follow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectFollowed", ReplyAction="http://tempuri.org/IService1/SelectFollowedResponse")]
        ChatStream.ServiceReference1.Follow[] SelectFollowed(ChatStream.ServiceReference1.User follower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectFollowed", ReplyAction="http://tempuri.org/IService1/SelectFollowedResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Follow[]> SelectFollowedAsync(ChatStream.ServiceReference1.User follower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsFollowing", ReplyAction="http://tempuri.org/IService1/IsFollowingResponse")]
        bool IsFollowing(ChatStream.ServiceReference1.Follow follower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsFollowing", ReplyAction="http://tempuri.org/IService1/IsFollowingResponse")]
        System.Threading.Tasks.Task<bool> IsFollowingAsync(ChatStream.ServiceReference1.Follow follower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertFriend", ReplyAction="http://tempuri.org/IService1/InsertFriendResponse")]
        ChatStream.ServiceReference1.Friend InsertFriend(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertFriend", ReplyAction="http://tempuri.org/IService1/InsertFriendResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend> InsertFriendAsync(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFriend", ReplyAction="http://tempuri.org/IService1/DeleteFriendResponse")]
        void DeleteFriend(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFriend", ReplyAction="http://tempuri.org/IService1/DeleteFriendResponse")]
        System.Threading.Tasks.Task DeleteFriendAsync(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AreFriends", ReplyAction="http://tempuri.org/IService1/AreFriendsResponse")]
        bool AreFriends(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AreFriends", ReplyAction="http://tempuri.org/IService1/AreFriendsResponse")]
        System.Threading.Tasks.Task<bool> AreFriendsAsync(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectFriend", ReplyAction="http://tempuri.org/IService1/SelectFriendResponse")]
        ChatStream.ServiceReference1.Friend SelectFriend(ChatStream.ServiceReference1.User user1, ChatStream.ServiceReference1.User user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectFriend", ReplyAction="http://tempuri.org/IService1/SelectFriendResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend> SelectFriendAsync(ChatStream.ServiceReference1.User user1, ChatStream.ServiceReference1.User user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRecivedReq", ReplyAction="http://tempuri.org/IService1/SelectRecivedReqResponse")]
        ChatStream.ServiceReference1.Friend[] SelectRecivedReq(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRecivedReq", ReplyAction="http://tempuri.org/IService1/SelectRecivedReqResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend[]> SelectRecivedReqAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserFriends", ReplyAction="http://tempuri.org/IService1/SelectUserFriendsResponse")]
        ChatStream.ServiceReference1.Friend[] SelectUserFriends(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserFriends", ReplyAction="http://tempuri.org/IService1/SelectUserFriendsResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend[]> SelectUserFriendsAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ApproveFriend", ReplyAction="http://tempuri.org/IService1/ApproveFriendResponse")]
        void ApproveFriend(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ApproveFriend", ReplyAction="http://tempuri.org/IService1/ApproveFriendResponse")]
        System.Threading.Tasks.Task ApproveFriendAsync(ChatStream.ServiceReference1.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertLike", ReplyAction="http://tempuri.org/IService1/InsertLikeResponse")]
        ChatStream.ServiceReference1.Like InsertLike(ChatStream.ServiceReference1.Like like);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertLike", ReplyAction="http://tempuri.org/IService1/InsertLikeResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Like> InsertLikeAsync(ChatStream.ServiceReference1.Like like);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLike", ReplyAction="http://tempuri.org/IService1/DeleteLikeResponse")]
        void DeleteLike(ChatStream.ServiceReference1.Like like);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLike", ReplyAction="http://tempuri.org/IService1/DeleteLikeResponse")]
        System.Threading.Tasks.Task DeleteLikeAsync(ChatStream.ServiceReference1.Like like);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountLikes", ReplyAction="http://tempuri.org/IService1/CountLikesResponse")]
        int CountLikes(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountLikes", ReplyAction="http://tempuri.org/IService1/CountLikesResponse")]
        System.Threading.Tasks.Task<int> CountLikesAsync(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsLiked", ReplyAction="http://tempuri.org/IService1/IsLikedResponse")]
        bool IsLiked(ChatStream.ServiceReference1.Like like);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsLiked", ReplyAction="http://tempuri.org/IService1/IsLikedResponse")]
        System.Threading.Tasks.Task<bool> IsLikedAsync(ChatStream.ServiceReference1.Like like);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPost", ReplyAction="http://tempuri.org/IService1/InsertPostResponse")]
        ChatStream.ServiceReference1.Post InsertPost(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPost", ReplyAction="http://tempuri.org/IService1/InsertPostResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post> InsertPostAsync(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePost", ReplyAction="http://tempuri.org/IService1/DeletePostResponse")]
        void DeletePost(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePost", ReplyAction="http://tempuri.org/IService1/DeletePostResponse")]
        System.Threading.Tasks.Task DeletePostAsync(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePost", ReplyAction="http://tempuri.org/IService1/UpdatePostResponse")]
        void UpdatePost(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePost", ReplyAction="http://tempuri.org/IService1/UpdatePostResponse")]
        System.Threading.Tasks.Task UpdatePostAsync(ChatStream.ServiceReference1.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserFeed", ReplyAction="http://tempuri.org/IService1/SelectUserFeedResponse")]
        ChatStream.ServiceReference1.Post[] SelectUserFeed(ChatStream.ServiceReference1.User mainUser, ChatStream.ServiceReference1.User req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserFeed", ReplyAction="http://tempuri.org/IService1/SelectUserFeedResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectUserFeedAsync(ChatStream.ServiceReference1.User mainUser, ChatStream.ServiceReference1.User req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectMyFeed", ReplyAction="http://tempuri.org/IService1/SelectMyFeedResponse")]
        ChatStream.ServiceReference1.Post[] SelectMyFeed(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectMyFeed", ReplyAction="http://tempuri.org/IService1/SelectMyFeedResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectMyFeedAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPostsByUser", ReplyAction="http://tempuri.org/IService1/SelectPostsByUserResponse")]
        ChatStream.ServiceReference1.Post[] SelectPostsByUser(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPostsByUser", ReplyAction="http://tempuri.org/IService1/SelectPostsByUserResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectPostsByUserAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPostsByUID", ReplyAction="http://tempuri.org/IService1/SelectPostsByUIDResponse")]
        ChatStream.ServiceReference1.Post[] SelectPostsByUID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPostsByUID", ReplyAction="http://tempuri.org/IService1/SelectPostsByUIDResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectPostsByUIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPostByID", ReplyAction="http://tempuri.org/IService1/SelectPostByIDResponse")]
        ChatStream.ServiceReference1.Post SelectPostByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPostByID", ReplyAction="http://tempuri.org/IService1/SelectPostByIDResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post> SelectPostByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertDM", ReplyAction="http://tempuri.org/IService1/InsertDMResponse")]
        void InsertDM(ChatStream.ServiceReference1.DMessage dMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertDM", ReplyAction="http://tempuri.org/IService1/InsertDMResponse")]
        System.Threading.Tasks.Task InsertDMAsync(ChatStream.ServiceReference1.DMessage dMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDMChats", ReplyAction="http://tempuri.org/IService1/GetAllDMChatsResponse")]
        ChatStream.ServiceReference1.User[] GetAllDMChats(ChatStream.ServiceReference1.User main);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDMChats", ReplyAction="http://tempuri.org/IService1/GetAllDMChatsResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> GetAllDMChatsAsync(ChatStream.ServiceReference1.User main);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllDMsChat", ReplyAction="http://tempuri.org/IService1/SelectAllDMsChatResponse")]
        ChatStream.ServiceReference1.DMessage[] SelectAllDMsChat(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllDMsChat", ReplyAction="http://tempuri.org/IService1/SelectAllDMsChatResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.DMessage[]> SelectAllDMsChatAsync(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AreChatting", ReplyAction="http://tempuri.org/IService1/AreChattingResponse")]
        bool AreChatting(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AreChatting", ReplyAction="http://tempuri.org/IService1/AreChattingResponse")]
        System.Threading.Tasks.Task<bool> AreChattingAsync(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUnSeenDM", ReplyAction="http://tempuri.org/IService1/SelectUnSeenDMResponse")]
        ChatStream.ServiceReference1.DMessage[] SelectUnSeenDM(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUnSeenDM", ReplyAction="http://tempuri.org/IService1/SelectUnSeenDMResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.DMessage[]> SelectUnSeenDMAsync(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetChatsDMUpdateState", ReplyAction="http://tempuri.org/IService1/GetChatsDMUpdateStateResponse")]
        int GetChatsDMUpdateState(ChatStream.ServiceReference1.User main);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetChatsDMUpdateState", ReplyAction="http://tempuri.org/IService1/GetChatsDMUpdateStateResponse")]
        System.Threading.Tasks.Task<int> GetChatsDMUpdateStateAsync(ChatStream.ServiceReference1.User main);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupByID", ReplyAction="http://tempuri.org/IService1/GetGroupByIDResponse")]
        ChatStream.ServiceReference1.Group GetGroupByID(int groupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupByID", ReplyAction="http://tempuri.org/IService1/GetGroupByIDResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group> GetGroupByIDAsync(int groupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupsByName", ReplyAction="http://tempuri.org/IService1/GetGroupsByNameResponse")]
        ChatStream.ServiceReference1.Group[] GetGroupsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupsByName", ReplyAction="http://tempuri.org/IService1/GetGroupsByNameResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group[]> GetGroupsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGroup", ReplyAction="http://tempuri.org/IService1/InsertGroupResponse")]
        void InsertGroup(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User creator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGroup", ReplyAction="http://tempuri.org/IService1/InsertGroupResponse")]
        System.Threading.Tasks.Task InsertGroupAsync(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User creator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGroup", ReplyAction="http://tempuri.org/IService1/UpdateGroupResponse")]
        void UpdateGroup(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGroup", ReplyAction="http://tempuri.org/IService1/UpdateGroupResponse")]
        System.Threading.Tasks.Task UpdateGroupAsync(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGroup", ReplyAction="http://tempuri.org/IService1/DeleteGroupResponse")]
        void DeleteGroup(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGroup", ReplyAction="http://tempuri.org/IService1/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGMemeber", ReplyAction="http://tempuri.org/IService1/InsertGMemeberResponse")]
        ChatStream.ServiceReference1.GMember InsertGMemeber(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGMemeber", ReplyAction="http://tempuri.org/IService1/InsertGMemeberResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMember> InsertGMemeberAsync(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGMember", ReplyAction="http://tempuri.org/IService1/DeleteGMemberResponse")]
        void DeleteGMember(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGMember", ReplyAction="http://tempuri.org/IService1/DeleteGMemberResponse")]
        System.Threading.Tasks.Task DeleteGMemberAsync(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGMemberStatus", ReplyAction="http://tempuri.org/IService1/UpdateGMemberStatusResponse")]
        void UpdateGMemberStatus(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGMemberStatus", ReplyAction="http://tempuri.org/IService1/UpdateGMemberStatusResponse")]
        System.Threading.Tasks.Task UpdateGMemberStatusAsync(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupMembers", ReplyAction="http://tempuri.org/IService1/GetGroupMembersResponse")]
        ChatStream.ServiceReference1.GMember[] GetGroupMembers(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupMembers", ReplyAction="http://tempuri.org/IService1/GetGroupMembersResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMember[]> GetGroupMembersAsync(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectGroupAdmins", ReplyAction="http://tempuri.org/IService1/SelectGroupAdminsResponse")]
        ChatStream.ServiceReference1.User[] SelectGroupAdmins(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectGroupAdmins", ReplyAction="http://tempuri.org/IService1/SelectGroupAdminsResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> SelectGroupAdminsAsync(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectGroupNonAdmins", ReplyAction="http://tempuri.org/IService1/SelectGroupNonAdminsResponse")]
        ChatStream.ServiceReference1.User[] SelectGroupNonAdmins(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectGroupNonAdmins", ReplyAction="http://tempuri.org/IService1/SelectGroupNonAdminsResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> SelectGroupNonAdminsAsync(ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsGroupAdmin", ReplyAction="http://tempuri.org/IService1/IsGroupAdminResponse")]
        bool IsGroupAdmin(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsGroupAdmin", ReplyAction="http://tempuri.org/IService1/IsGroupAdminResponse")]
        System.Threading.Tasks.Task<bool> IsGroupAdminAsync(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsGroupMember", ReplyAction="http://tempuri.org/IService1/IsGroupMemberResponse")]
        bool IsGroupMember(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsGroupMember", ReplyAction="http://tempuri.org/IService1/IsGroupMemberResponse")]
        System.Threading.Tasks.Task<bool> IsGroupMemberAsync(ChatStream.ServiceReference1.GMember member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGMessage", ReplyAction="http://tempuri.org/IService1/InsertGMessageResponse")]
        ChatStream.ServiceReference1.GMessage InsertGMessage(ChatStream.ServiceReference1.GMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGMessage", ReplyAction="http://tempuri.org/IService1/InsertGMessageResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage> InsertGMessageAsync(ChatStream.ServiceReference1.GMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGMessage", ReplyAction="http://tempuri.org/IService1/DeleteGMessageResponse")]
        void DeleteGMessage(ChatStream.ServiceReference1.GMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGMessage", ReplyAction="http://tempuri.org/IService1/DeleteGMessageResponse")]
        System.Threading.Tasks.Task DeleteGMessageAsync(ChatStream.ServiceReference1.GMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGMessage", ReplyAction="http://tempuri.org/IService1/UpdateGMessageResponse")]
        void UpdateGMessage(ChatStream.ServiceReference1.GMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGMessage", ReplyAction="http://tempuri.org/IService1/UpdateGMessageResponse")]
        System.Threading.Tasks.Task UpdateGMessageAsync(ChatStream.ServiceReference1.GMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectGMessages", ReplyAction="http://tempuri.org/IService1/SelectGMessagesResponse")]
        ChatStream.ServiceReference1.GMessage[] SelectGMessages(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectGMessages", ReplyAction="http://tempuri.org/IService1/SelectGMessagesResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage[]> SelectGMessagesAsync(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGMessages", ReplyAction="http://tempuri.org/IService1/GetGMessagesResponse")]
        ChatStream.ServiceReference1.GMessage[] GetGMessages(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGMessages", ReplyAction="http://tempuri.org/IService1/GetGMessagesResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage[]> GetGMessagesAsync(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUnSeenGMessages", ReplyAction="http://tempuri.org/IService1/GetUnSeenGMessagesResponse")]
        ChatStream.ServiceReference1.GMessage[] GetUnSeenGMessages(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUnSeenGMessages", ReplyAction="http://tempuri.org/IService1/GetUnSeenGMessagesResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage[]> GetUnSeenGMessagesAsync(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMyGroups", ReplyAction="http://tempuri.org/IService1/GetMyGroupsResponse")]
        ChatStream.ServiceReference1.Group[] GetMyGroups(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMyGroups", ReplyAction="http://tempuri.org/IService1/GetMyGroupsResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group[]> GetMyGroupsAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMyGroupsUpdateState", ReplyAction="http://tempuri.org/IService1/GetMyGroupsUpdateStateResponse")]
        int GetMyGroupsUpdateState(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMyGroupsUpdateState", ReplyAction="http://tempuri.org/IService1/GetMyGroupsUpdateStateResponse")]
        System.Threading.Tasks.Task<int> GetMyGroupsUpdateStateAsync(ChatStream.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchPublicGroups", ReplyAction="http://tempuri.org/IService1/SearchPublicGroupsResponse")]
        ChatStream.ServiceReference1.Group[] SearchPublicGroups(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchPublicGroups", ReplyAction="http://tempuri.org/IService1/SearchPublicGroupsResponse")]
        System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group[]> SearchPublicGroupsAsync(string groupName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ChatStream.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ChatStream.ServiceReference1.IService1>, ChatStream.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ChatStream.ServiceReference1.CompositeType GetDataUsingDataContract(ChatStream.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ChatStream.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void DeleteComment(ChatStream.ServiceReference1.Comment entity) {
            base.Channel.DeleteComment(entity);
        }
        
        public System.Threading.Tasks.Task DeleteCommentAsync(ChatStream.ServiceReference1.Comment entity) {
            return base.Channel.DeleteCommentAsync(entity);
        }
        
        public void InsertComment(ChatStream.ServiceReference1.Comment entity) {
            base.Channel.InsertComment(entity);
        }
        
        public System.Threading.Tasks.Task InsertCommentAsync(ChatStream.ServiceReference1.Comment entity) {
            return base.Channel.InsertCommentAsync(entity);
        }
        
        public void UpdateComment(ChatStream.ServiceReference1.Comment entity) {
            base.Channel.UpdateComment(entity);
        }
        
        public System.Threading.Tasks.Task UpdateCommentAsync(ChatStream.ServiceReference1.Comment entity) {
            return base.Channel.UpdateCommentAsync(entity);
        }
        
        public ChatStream.ServiceReference1.Comment[] SelectCommentByPost(ChatStream.ServiceReference1.Post post) {
            return base.Channel.SelectCommentByPost(post);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Comment[]> SelectCommentByPostAsync(ChatStream.ServiceReference1.Post post) {
            return base.Channel.SelectCommentByPostAsync(post);
        }
        
        public ChatStream.ServiceReference1.User InsertUser(ChatStream.ServiceReference1.User entity) {
            return base.Channel.InsertUser(entity);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> InsertUserAsync(ChatStream.ServiceReference1.User entity) {
            return base.Channel.InsertUserAsync(entity);
        }
        
        public ChatStream.ServiceReference1.User Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public ChatStream.ServiceReference1.User SelectByUserID(int ID) {
            return base.Channel.SelectByUserID(ID);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> SelectByUserIDAsync(int ID) {
            return base.Channel.SelectByUserIDAsync(ID);
        }
        
        public ChatStream.ServiceReference1.User[] SelectUserByUName(string Uname) {
            return base.Channel.SelectUserByUName(Uname);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> SelectUserByUNameAsync(string Uname) {
            return base.Channel.SelectUserByUNameAsync(Uname);
        }
        
        public void UpdateUser(ChatStream.ServiceReference1.User user) {
            base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DeleteUser(string userName, string password) {
            base.Channel.DeleteUser(userName, password);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string userName, string password) {
            return base.Channel.DeleteUserAsync(userName, password);
        }
        
        public ChatStream.ServiceReference1.User SignUp(ChatStream.ServiceReference1.User user) {
            return base.Channel.SignUp(user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User> SignUpAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.SignUpAsync(user);
        }
        
        public ChatStream.ServiceReference1.Follow InsertFollow(ChatStream.ServiceReference1.Follow follow) {
            return base.Channel.InsertFollow(follow);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Follow> InsertFollowAsync(ChatStream.ServiceReference1.Follow follow) {
            return base.Channel.InsertFollowAsync(follow);
        }
        
        public void DeleteFollow(ChatStream.ServiceReference1.Follow follow) {
            base.Channel.DeleteFollow(follow);
        }
        
        public System.Threading.Tasks.Task DeleteFollowAsync(ChatStream.ServiceReference1.Follow follow) {
            return base.Channel.DeleteFollowAsync(follow);
        }
        
        public ChatStream.ServiceReference1.Follow[] SelectFollowed(ChatStream.ServiceReference1.User follower) {
            return base.Channel.SelectFollowed(follower);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Follow[]> SelectFollowedAsync(ChatStream.ServiceReference1.User follower) {
            return base.Channel.SelectFollowedAsync(follower);
        }
        
        public bool IsFollowing(ChatStream.ServiceReference1.Follow follower) {
            return base.Channel.IsFollowing(follower);
        }
        
        public System.Threading.Tasks.Task<bool> IsFollowingAsync(ChatStream.ServiceReference1.Follow follower) {
            return base.Channel.IsFollowingAsync(follower);
        }
        
        public ChatStream.ServiceReference1.Friend InsertFriend(ChatStream.ServiceReference1.Friend friend) {
            return base.Channel.InsertFriend(friend);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend> InsertFriendAsync(ChatStream.ServiceReference1.Friend friend) {
            return base.Channel.InsertFriendAsync(friend);
        }
        
        public void DeleteFriend(ChatStream.ServiceReference1.Friend friend) {
            base.Channel.DeleteFriend(friend);
        }
        
        public System.Threading.Tasks.Task DeleteFriendAsync(ChatStream.ServiceReference1.Friend friend) {
            return base.Channel.DeleteFriendAsync(friend);
        }
        
        public bool AreFriends(ChatStream.ServiceReference1.Friend friend) {
            return base.Channel.AreFriends(friend);
        }
        
        public System.Threading.Tasks.Task<bool> AreFriendsAsync(ChatStream.ServiceReference1.Friend friend) {
            return base.Channel.AreFriendsAsync(friend);
        }
        
        public ChatStream.ServiceReference1.Friend SelectFriend(ChatStream.ServiceReference1.User user1, ChatStream.ServiceReference1.User user2) {
            return base.Channel.SelectFriend(user1, user2);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend> SelectFriendAsync(ChatStream.ServiceReference1.User user1, ChatStream.ServiceReference1.User user2) {
            return base.Channel.SelectFriendAsync(user1, user2);
        }
        
        public ChatStream.ServiceReference1.Friend[] SelectRecivedReq(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectRecivedReq(user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend[]> SelectRecivedReqAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectRecivedReqAsync(user);
        }
        
        public ChatStream.ServiceReference1.Friend[] SelectUserFriends(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectUserFriends(user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Friend[]> SelectUserFriendsAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectUserFriendsAsync(user);
        }
        
        public void ApproveFriend(ChatStream.ServiceReference1.Friend friend) {
            base.Channel.ApproveFriend(friend);
        }
        
        public System.Threading.Tasks.Task ApproveFriendAsync(ChatStream.ServiceReference1.Friend friend) {
            return base.Channel.ApproveFriendAsync(friend);
        }
        
        public ChatStream.ServiceReference1.Like InsertLike(ChatStream.ServiceReference1.Like like) {
            return base.Channel.InsertLike(like);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Like> InsertLikeAsync(ChatStream.ServiceReference1.Like like) {
            return base.Channel.InsertLikeAsync(like);
        }
        
        public void DeleteLike(ChatStream.ServiceReference1.Like like) {
            base.Channel.DeleteLike(like);
        }
        
        public System.Threading.Tasks.Task DeleteLikeAsync(ChatStream.ServiceReference1.Like like) {
            return base.Channel.DeleteLikeAsync(like);
        }
        
        public int CountLikes(ChatStream.ServiceReference1.Post post) {
            return base.Channel.CountLikes(post);
        }
        
        public System.Threading.Tasks.Task<int> CountLikesAsync(ChatStream.ServiceReference1.Post post) {
            return base.Channel.CountLikesAsync(post);
        }
        
        public bool IsLiked(ChatStream.ServiceReference1.Like like) {
            return base.Channel.IsLiked(like);
        }
        
        public System.Threading.Tasks.Task<bool> IsLikedAsync(ChatStream.ServiceReference1.Like like) {
            return base.Channel.IsLikedAsync(like);
        }
        
        public ChatStream.ServiceReference1.Post InsertPost(ChatStream.ServiceReference1.Post post) {
            return base.Channel.InsertPost(post);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post> InsertPostAsync(ChatStream.ServiceReference1.Post post) {
            return base.Channel.InsertPostAsync(post);
        }
        
        public void DeletePost(ChatStream.ServiceReference1.Post post) {
            base.Channel.DeletePost(post);
        }
        
        public System.Threading.Tasks.Task DeletePostAsync(ChatStream.ServiceReference1.Post post) {
            return base.Channel.DeletePostAsync(post);
        }
        
        public void UpdatePost(ChatStream.ServiceReference1.Post post) {
            base.Channel.UpdatePost(post);
        }
        
        public System.Threading.Tasks.Task UpdatePostAsync(ChatStream.ServiceReference1.Post post) {
            return base.Channel.UpdatePostAsync(post);
        }
        
        public ChatStream.ServiceReference1.Post[] SelectUserFeed(ChatStream.ServiceReference1.User mainUser, ChatStream.ServiceReference1.User req) {
            return base.Channel.SelectUserFeed(mainUser, req);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectUserFeedAsync(ChatStream.ServiceReference1.User mainUser, ChatStream.ServiceReference1.User req) {
            return base.Channel.SelectUserFeedAsync(mainUser, req);
        }
        
        public ChatStream.ServiceReference1.Post[] SelectMyFeed(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectMyFeed(user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectMyFeedAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectMyFeedAsync(user);
        }
        
        public ChatStream.ServiceReference1.Post[] SelectPostsByUser(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectPostsByUser(user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectPostsByUserAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.SelectPostsByUserAsync(user);
        }
        
        public ChatStream.ServiceReference1.Post[] SelectPostsByUID(int ID) {
            return base.Channel.SelectPostsByUID(ID);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post[]> SelectPostsByUIDAsync(int ID) {
            return base.Channel.SelectPostsByUIDAsync(ID);
        }
        
        public ChatStream.ServiceReference1.Post SelectPostByID(int id) {
            return base.Channel.SelectPostByID(id);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Post> SelectPostByIDAsync(int id) {
            return base.Channel.SelectPostByIDAsync(id);
        }
        
        public void InsertDM(ChatStream.ServiceReference1.DMessage dMessage) {
            base.Channel.InsertDM(dMessage);
        }
        
        public System.Threading.Tasks.Task InsertDMAsync(ChatStream.ServiceReference1.DMessage dMessage) {
            return base.Channel.InsertDMAsync(dMessage);
        }
        
        public ChatStream.ServiceReference1.User[] GetAllDMChats(ChatStream.ServiceReference1.User main) {
            return base.Channel.GetAllDMChats(main);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> GetAllDMChatsAsync(ChatStream.ServiceReference1.User main) {
            return base.Channel.GetAllDMChatsAsync(main);
        }
        
        public ChatStream.ServiceReference1.DMessage[] SelectAllDMsChat(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted) {
            return base.Channel.SelectAllDMsChat(main, chatted);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.DMessage[]> SelectAllDMsChatAsync(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted) {
            return base.Channel.SelectAllDMsChatAsync(main, chatted);
        }
        
        public bool AreChatting(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted) {
            return base.Channel.AreChatting(main, chatted);
        }
        
        public System.Threading.Tasks.Task<bool> AreChattingAsync(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted) {
            return base.Channel.AreChattingAsync(main, chatted);
        }
        
        public ChatStream.ServiceReference1.DMessage[] SelectUnSeenDM(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted) {
            return base.Channel.SelectUnSeenDM(main, chatted);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.DMessage[]> SelectUnSeenDMAsync(ChatStream.ServiceReference1.User main, ChatStream.ServiceReference1.User chatted) {
            return base.Channel.SelectUnSeenDMAsync(main, chatted);
        }
        
        public int GetChatsDMUpdateState(ChatStream.ServiceReference1.User main) {
            return base.Channel.GetChatsDMUpdateState(main);
        }
        
        public System.Threading.Tasks.Task<int> GetChatsDMUpdateStateAsync(ChatStream.ServiceReference1.User main) {
            return base.Channel.GetChatsDMUpdateStateAsync(main);
        }
        
        public ChatStream.ServiceReference1.Group GetGroupByID(int groupID) {
            return base.Channel.GetGroupByID(groupID);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group> GetGroupByIDAsync(int groupID) {
            return base.Channel.GetGroupByIDAsync(groupID);
        }
        
        public ChatStream.ServiceReference1.Group[] GetGroupsByName(string name) {
            return base.Channel.GetGroupsByName(name);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group[]> GetGroupsByNameAsync(string name) {
            return base.Channel.GetGroupsByNameAsync(name);
        }
        
        public void InsertGroup(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User creator) {
            base.Channel.InsertGroup(group, creator);
        }
        
        public System.Threading.Tasks.Task InsertGroupAsync(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User creator) {
            return base.Channel.InsertGroupAsync(group, creator);
        }
        
        public void UpdateGroup(ChatStream.ServiceReference1.Group group) {
            base.Channel.UpdateGroup(group);
        }
        
        public System.Threading.Tasks.Task UpdateGroupAsync(ChatStream.ServiceReference1.Group group) {
            return base.Channel.UpdateGroupAsync(group);
        }
        
        public void DeleteGroup(ChatStream.ServiceReference1.Group group) {
            base.Channel.DeleteGroup(group);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(ChatStream.ServiceReference1.Group group) {
            return base.Channel.DeleteGroupAsync(group);
        }
        
        public ChatStream.ServiceReference1.GMember InsertGMemeber(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User user) {
            return base.Channel.InsertGMemeber(group, user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMember> InsertGMemeberAsync(ChatStream.ServiceReference1.Group group, ChatStream.ServiceReference1.User user) {
            return base.Channel.InsertGMemeberAsync(group, user);
        }
        
        public void DeleteGMember(ChatStream.ServiceReference1.GMember member) {
            base.Channel.DeleteGMember(member);
        }
        
        public System.Threading.Tasks.Task DeleteGMemberAsync(ChatStream.ServiceReference1.GMember member) {
            return base.Channel.DeleteGMemberAsync(member);
        }
        
        public void UpdateGMemberStatus(ChatStream.ServiceReference1.GMember member) {
            base.Channel.UpdateGMemberStatus(member);
        }
        
        public System.Threading.Tasks.Task UpdateGMemberStatusAsync(ChatStream.ServiceReference1.GMember member) {
            return base.Channel.UpdateGMemberStatusAsync(member);
        }
        
        public ChatStream.ServiceReference1.GMember[] GetGroupMembers(ChatStream.ServiceReference1.Group group) {
            return base.Channel.GetGroupMembers(group);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMember[]> GetGroupMembersAsync(ChatStream.ServiceReference1.Group group) {
            return base.Channel.GetGroupMembersAsync(group);
        }
        
        public ChatStream.ServiceReference1.User[] SelectGroupAdmins(ChatStream.ServiceReference1.Group group) {
            return base.Channel.SelectGroupAdmins(group);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> SelectGroupAdminsAsync(ChatStream.ServiceReference1.Group group) {
            return base.Channel.SelectGroupAdminsAsync(group);
        }
        
        public ChatStream.ServiceReference1.User[] SelectGroupNonAdmins(ChatStream.ServiceReference1.Group group) {
            return base.Channel.SelectGroupNonAdmins(group);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.User[]> SelectGroupNonAdminsAsync(ChatStream.ServiceReference1.Group group) {
            return base.Channel.SelectGroupNonAdminsAsync(group);
        }
        
        public bool IsGroupAdmin(ChatStream.ServiceReference1.GMember member) {
            return base.Channel.IsGroupAdmin(member);
        }
        
        public System.Threading.Tasks.Task<bool> IsGroupAdminAsync(ChatStream.ServiceReference1.GMember member) {
            return base.Channel.IsGroupAdminAsync(member);
        }
        
        public bool IsGroupMember(ChatStream.ServiceReference1.GMember member) {
            return base.Channel.IsGroupMember(member);
        }
        
        public System.Threading.Tasks.Task<bool> IsGroupMemberAsync(ChatStream.ServiceReference1.GMember member) {
            return base.Channel.IsGroupMemberAsync(member);
        }
        
        public ChatStream.ServiceReference1.GMessage InsertGMessage(ChatStream.ServiceReference1.GMessage message) {
            return base.Channel.InsertGMessage(message);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage> InsertGMessageAsync(ChatStream.ServiceReference1.GMessage message) {
            return base.Channel.InsertGMessageAsync(message);
        }
        
        public void DeleteGMessage(ChatStream.ServiceReference1.GMessage message) {
            base.Channel.DeleteGMessage(message);
        }
        
        public System.Threading.Tasks.Task DeleteGMessageAsync(ChatStream.ServiceReference1.GMessage message) {
            return base.Channel.DeleteGMessageAsync(message);
        }
        
        public void UpdateGMessage(ChatStream.ServiceReference1.GMessage message) {
            base.Channel.UpdateGMessage(message);
        }
        
        public System.Threading.Tasks.Task UpdateGMessageAsync(ChatStream.ServiceReference1.GMessage message) {
            return base.Channel.UpdateGMessageAsync(message);
        }
        
        public ChatStream.ServiceReference1.GMessage[] SelectGMessages(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group) {
            return base.Channel.SelectGMessages(user, group);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage[]> SelectGMessagesAsync(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group) {
            return base.Channel.SelectGMessagesAsync(user, group);
        }
        
        public ChatStream.ServiceReference1.GMessage[] GetGMessages(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group) {
            return base.Channel.GetGMessages(user, group);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage[]> GetGMessagesAsync(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group) {
            return base.Channel.GetGMessagesAsync(user, group);
        }
        
        public ChatStream.ServiceReference1.GMessage[] GetUnSeenGMessages(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group) {
            return base.Channel.GetUnSeenGMessages(user, group);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.GMessage[]> GetUnSeenGMessagesAsync(ChatStream.ServiceReference1.User user, ChatStream.ServiceReference1.Group group) {
            return base.Channel.GetUnSeenGMessagesAsync(user, group);
        }
        
        public ChatStream.ServiceReference1.Group[] GetMyGroups(ChatStream.ServiceReference1.User user) {
            return base.Channel.GetMyGroups(user);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group[]> GetMyGroupsAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.GetMyGroupsAsync(user);
        }
        
        public int GetMyGroupsUpdateState(ChatStream.ServiceReference1.User user) {
            return base.Channel.GetMyGroupsUpdateState(user);
        }
        
        public System.Threading.Tasks.Task<int> GetMyGroupsUpdateStateAsync(ChatStream.ServiceReference1.User user) {
            return base.Channel.GetMyGroupsUpdateStateAsync(user);
        }
        
        public ChatStream.ServiceReference1.Group[] SearchPublicGroups(string groupName) {
            return base.Channel.SearchPublicGroups(groupName);
        }
        
        public System.Threading.Tasks.Task<ChatStream.ServiceReference1.Group[]> SearchPublicGroupsAsync(string groupName) {
            return base.Channel.SearchPublicGroupsAsync(groupName);
        }
    }
}
